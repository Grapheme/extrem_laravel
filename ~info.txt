Основная идеология новой структуры: разнести и хранить _все_ файлы каждого модуля в одной папке - /app/modules/*
Например, модуль новостей будет находиться в папке /app/modules/news
В корне папки должны находиться контроллеры (для публичной части сайта, и для административной).
Публичный контроллер должен называться <name>.controller.php, в данном случае news.controller.php
Контроллер администратора должен иметь префикс admin_: admin_news.controller.php
Также, в папке с модулем должны находиться модели и представления (шаблоны, вьюшки).
Модели: /app/modules/<name>/models/*
Шаблоны: /app/modules/<name>/views/*
Языковые файлы локализаций: /app/modules/<name>/lang/ru/*

Шорткоды (для wysiwyg редактора) будут храниться не все в одном файле - каждый модуль будет предоставлять свой набор шорткодов. Подумать как лучше реализовать (возможно, набор шорткодов возвращать через отдельный метод).

Модуль должен содержать в себе и возвращать по запросу:
- свое название (должен ли админский и обычный модули возвращать одно имя? модели для них будут одни и те же)
+ роуты
- набор используемых в работе шаблонов
+ шорткоды
- используемые модели (???)
....... (возможно, что-то еще)
Список моделей и шаблонов может использоваться для проверки валидности, т.е. если система не видит какой-то из шаблонов - сразу выдает сообщение об этом (завести методы в BaseController: checkViewExists & checkModelExists).

+к этому для базового функционала вроде групп и пользователей модели и контроллеры могут храниться в стандартных директориях (под вопросом...)




Чтобы система видела классы в папке /app/modules/, добавим в composer.json:

	"autoload": {
		"classmap": [
            ........
			"app/modules",
            ........

И выполним в консоли: composer dump-autoload -o 





В первую очередь: страницы, новости, [галереи], разграничение прав
Важные моменты: ПРАВА ДОСТУПА / МУЛЬТИЯЗЫЧНОСТЬ / SEO
Шорткоды - в виде js-кнопок-плагинов для wysiwyg редактора




Ссылки на страницы, на которых должна использоваться мультиязычность по префиксу, должны обворачиваться:
link::i18n(...)
Например в новостях, ссылка на полную новость:
link::i18n(URL::route("news_full", array("url"=> $new->slug), false)) 
В данной строке генерится ссылка на именованный роут news_full, с передачей slug в качестве url. false - ссылка будет относительной от корня домена (без http://<домен>). 
Также доступны методы:
link:to (аналог url())
link:auth (аналог slink::createAuthLink())



